/** * 项目名称：平台 * 系统名： * 文件名：Notice.java*/package com.centit.sys.service.impl;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import com.centit.sys.model.NotcDeptModel;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.centit.commons.model.BusinessConsts;import com.centit.commons.util.InterUtil;import com.centit.commons.util.StringUtil;import com.centit.core.po.PageDesc;import com.centit.core.utils.LogicUtil;import com.centit.sys.mapper.NoticeMapper;import com.centit.sys.model.NoticeModel;import com.centit.sys.model.UserBean;import com.centit.sys.service.NoticeService;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;/** * *@module * *@func * *@version 1.1 * *@author zhuxw * *@createdate 2011-11-16 */@Servicepublic class NoticeServiceImpl  implements NoticeService {	@Autowired	NoticeMapper mapper;	/**	 * * 查询并分页	 * * @param params map对象	 * * @param pageNo 页码.	 * 	 * @param params the params	 * @param	 * 	 * @return the i list page	 */	public void pageQuery(Map<String,Object> params, PageDesc pageDesc) {		Page<Map<String,String>> p = PageHelper.startPage(pageDesc.getPageNo(), pageDesc.getPageSize(), true);    	mapper.pageQuery(params);		LogicUtil.transPageHelper(pageDesc, p);	}	/**	 * * 加载	 * * @param param 主键字段值.	 * 	 * @param param the param	 * 	 * @return the map< string, string>	 */	public Map<String,Object> load(String param) {		Map<String,Object> map=mapper.loadById( param);		String attPath = LogicUtil.getAttPath(param);		map.put("FILEPATH",attPath);		return map;	}		/**	 * * 插入数据	 * * @param params map对象.	 * 	 * @param params the params	 * 	 * @return true, if tx insert	 */	public boolean txInsert(Map<String,String> params) {		mapper.insert(params);		return true;	}	/**	 * * 更新数据	 * * @param params map对象.	 * 	 * @param params the params	 * 	 * @return true, if tx update by id	 */	public boolean txUpdateById(Map<String,String> params) {		mapper.updateById(params);		return true;	}	/**	 * * 删除数据	 * * @param params map对象.	 * 	 * @param NOTICEID the nOTICEID	 * 	 * @return true, if tx delete	 */	public boolean txDelete(String NOTICEID,UserBean userBean) {		Map<String,String> param = new HashMap<String,String>();		param.put("UPDATER", userBean.getXTYHID());		param.put("UPDNAME", userBean.getXM());		param.put("DELFLAG",BusinessConsts.DEL_FLAG_DROP);		param.put("NOTICE_ID",NOTICEID);		param.put("UPDTIME",BusinessConsts.UPDATE_TIME);		mapper.delete(param);		return true;	}	/**	 * * 编辑：新增/删除	 * * Description :	 * * @param NOTICEID	 * * @param noticeModel	 * * @param userBean.	 * 	 * @param NOTICEID the nOTICEID	 * @param noticeModel the notice model	 * @param userBean the user bean	 */	@Transactional	public String txEdit(String NOTICEID, NoticeModel noticeModel, UserBean userBean) {		Map<String,String> params = new HashMap<String,String>();        if(StringUtils.isBlank(noticeModel.getNOTICE_OBJ())){            noticeModel.setNOTICE_OBJ("2");        }		params.put("NOTICE_TITLE", noticeModel.getNOTICE_TITLE());		params.put("NOTICE_TYPE", noticeModel.getNOTICE_TYPE());		params.put("NOTICE", noticeModel.getNOTICE());		params.put("STATIME", noticeModel.getSTATIME());		params.put("ENDTIME", noticeModel.getENDTIME());		params.put("ISSUER_ID", noticeModel.getISSUER_ID());		params.put("ISSUER_NAME", noticeModel.getISSUER_NAME());		params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);		params.put("NOTICE_OBJ", noticeModel.getNOTICE_OBJ());//公告对象		params.put("NOTICE_LVL", noticeModel.getNOTICE_LVL());//公告级别		if(StringUtils.isEmpty(NOTICEID)){			NOTICEID = StringUtil.uuid32len();			params.put("NOTICE_ID", NOTICEID);			params.put("ZTXXID", userBean.getLoginZTXXID());			params.put("STATE", BusinessConsts.UNCOMMIT); 			params.put("CREATER", userBean.getXTYHID());//ID			params.put("CRENAME", userBean.getXM());			params.put("UPDATER", userBean.getXTYHID());			params.put("UPDNAME", userBean.getXM());			params.put("UPDTIME", "sysdate");			txInsert(params);		} else{			params.put("NOTICE_ID", NOTICEID);			params.put("UPDATER", userBean.getXTYHID());			params.put("UPDNAME", userBean.getXM());			params.put("UPDTIME", "sysdate");			txUpdateById(params);		}		params = new HashMap<String,String>();		params.put("NOTICE_ID", NOTICEID);		//删除旧的公告账套		mapper.deleteDeptChild(params);		//新插入公告账套		String noticeDeptsStr=noticeModel.getNOTICE_DEPTS();		if(StringUtils.isNotBlank(noticeDeptsStr)){			String[] noticeDepts=noticeDeptsStr.split(",");			for(String noticeDept:noticeDepts){				params.put("NOTC_DEPT_ID", StringUtil.uuid32len());				params.put("DEPT_ID", noticeDept);				params.put("NOTICE_ID", NOTICEID);				params.put("DEL_FLAG", BusinessConsts.DEL_FLAG_COMMON);				mapper.insertDeptChld(params);			}		}		InterUtil.delByFromId(NOTICEID);		//添加附件		if(StringUtils.isNotEmpty(noticeModel.getUPLOADEXCEL())) {			String filePath=noticeModel.getUPLOADEXCEL();			List<String>pathList=new ArrayList<String>(Arrays.asList(filePath.split(",")));			InterUtil.insertAttPath(pathList, userBean, NOTICEID);		}		return NOTICEID;	}	@Override	public List<Map<String,String>> childDeptQuery(String noticeId) {        Map<String,String> params = new HashMap<String,String>();        params.put("NOTICE_ID",noticeId);		return mapper.loadDeptChldByMainId(params);	}	@Override	public List<NotcDeptModel> loadDeptChilds(Map<String, String> params) {		return null;	}	@Override	public List<Map<String, String>> queryFGZTXXByUser(Map<String, String> params) {		return mapper.queryFGZTXXByUser(params);	}}