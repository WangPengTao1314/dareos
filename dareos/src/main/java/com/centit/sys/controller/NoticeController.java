/** * 项目名称：平台 * 系统名： * 文件名：Notice.java*/package com.centit.sys.controller;import java.io.PrintWriter;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.centit.common.controller.BaseController;import com.centit.commons.exception.ServiceException;import com.centit.commons.model.BusinessConsts;import com.centit.commons.model.Consts;import com.centit.commons.util.ParamUtil;import com.centit.commons.util.QXUtil;import com.centit.core.po.PageDesc;import com.centit.core.utils.LogicUtil;import com.centit.core.utils.SpringContextHolder;import com.centit.sys.model.NoticeModel;import com.centit.sys.model.UserBean;import com.centit.sys.service.NoticeService;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;/** * *@module *@func *@version 1.1 *@author zhuxw *@createdate 2011-11-16 */@Controller@RequestMapping("/sys/notice")public class NoticeController extends BaseController {	private static final String webPath = "/sys/notice";	/** 日志 **/	private Logger logger = Logger.getLogger(NoticeController.class);	/** 权限对象 **/	/** 维护 */	// 维护界面	// 增删改查	private static String PVG_BWS = "XT0011401";	private static String PVG_EDIT = "XT0011402";	private static String PVG_DELETE = "XT0011403";	// 启用,停用	private static String PVG_START_STOP = "";	// 确认，取消	private static String PVG_FINISH_CANCLE = "";	// 关闭	private static String PVG_CLOSE = "XT0011407";	/** end */	/** 审批维护必须维护字段 **/	// 提交撤销	private static String PVG_COMMIT_CANCLE = "XT0011404";	private static String PVG_TRACE = "XT0011404";	// 审核模块	private static String PVG_BWS_AUDIT = "XT0011406";	private static String PVG_AUDIT_AUDIT = "XT0011406";	private static String PVG_TRACE_AUDIT = "XT0011405";	// 审批流参数	private static String AUD_TAB_NAME = "T_SYS_NOTICE";// 表名	private static String AUD_TAB_KEY = "NOTICE_ID"; // 主键	private static String AUD_BUSS_STATE = "STATE";	private static String AUD_BUSS_TYPE = "SYS_NOTICE_AUDIT";	private static String AUD_FLOW_INS = "com.hoperun.sys.service.PublicFlowInterface";	/** 审批 end **/	/** 业务逻辑对象. */	@Autowired	private NoticeService noticeService;	/**	 * * 信息框架页面 * @param mapping * @param form * @param request * @param response	 * * @return.	 * 	 * @param mapping  the mapping	 * @param form     the form	 * @param request  the request	 * @param response the response	 * 	 * @return the action forward	 */	@RequestMapping(value = { "/toFrame" }, method = { RequestMethod.GET, RequestMethod.POST })	public String toFrame(HttpServletRequest request, HttpServletResponse response) {		// 设置跳转时需要的一些公用属性		ParamUtil.setCommAttributeEx(request);		request.setAttribute("paramUrl", ParamUtil.utf8Decoder(request, "paramUrl"));		return view(webPath, "Notice_Frame");	}	/**	 * * 查询结果列表 * @param mapping * @param form * @param request * @param response	 * * @return.	 * 	 * @param mapping  the mapping	 * @param form     the form	 * @param request  the request	 * @param response the response	 * 	 * @return the action forward	 */	@RequestMapping("/toList")	public String toList(HttpServletRequest request, HttpServletResponse response, PageDesc pageDesc) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG				&& (!QXUtil.checkMKQX(userBean, PVG_BWS) && !QXUtil.checkMKQX(userBean, PVG_BWS_AUDIT))) {			throw new ServiceException("对不起，您没有权限 !");		}		Map<String, Object> params = new HashMap<String, Object>();		ParamUtil.putStr2Map(request, "STATE", params);		ParamUtil.putStr2Map(request, "STATIME", params);		ParamUtil.putStr2Map(request, "ENDTIME", params);		ParamUtil.putStr2Map(request, "CRETIME_START", params);		ParamUtil.putStr2Map(request, "CRETIME_END", params);		ParamUtil.putStr2Map(request, "NOTICE_TYPE", params);		ParamUtil.putStr2Map(request, "STATE", params);		ParamUtil.putStr2Map(request, "NOTICE_OBJ", params);		params.put("USERID", userBean.getXTYHID());		// 只查询0的记录。1为删除。0为正常		params.put("DELFLAG", BusinessConsts.DEL_FLAG_COMMON);		String search = ParamUtil.get(request, "search");		String module = ParamUtil.get(request, "module");		// String NOTICE_OBJ = ParamUtil.get(request,"NOTICE_OBJ");		StringBuffer qx = new StringBuffer(ParamUtil.getPvgCon(search, module, PVG_BWS, PVG_BWS_AUDIT, AUD_TAB_KEY,				AUD_TAB_NAME, AUD_BUSS_TYPE, AUD_BUSS_STATE, userBean));		// if(!StringUtil.isEmpty(NOTICE_OBJ)){		// String tempSql = StringUtil.creCon("u.NOTICE_OBJ", NOTICE_OBJ, "");		// qx.append(tempSql);		// }		// 权限级别和审批流的封装		params.put("QXJBCON", "(" + qx.toString() + ")");		// 字段排序		ParamUtil.setOrderField(request, params);		noticeService.pageQuery(params, pageDesc);		request.setAttribute("params", params);		request.setAttribute("page", pageDesc);		request.setAttribute("pvg", setPvg(userBean));		request.setAttribute("module", module);		return view(webPath, "Notice_List");	}	/**	 * * 查看详细信息 * @param mapping * @param form * @param request * @param response	 * * @return.	 * 	 * @param mapping  the mapping	 * @param form     the form	 * @param request  the request	 * @param response the response	 * 	 * @return the action forward	 */	@RequestMapping(value = { "/toDetail" }, method = { RequestMethod.GET, RequestMethod.POST })	public String toDetail(HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS)) {			throw new ServiceException("对不起，您没有权限 !");		}		String NOTICEID = ParamUtil.get(request, "NOTICE_ID");		if (StringUtils.isNotEmpty(NOTICEID)) {			Map<String, Object> entry = noticeService.load(NOTICEID);			request.setAttribute("rst", entry);		}		return view(webPath, "Notice_Detail");	}	/**	 * * 删除 * @param mapping * @param form * @param request * @param response	 * * @return.	 * 	 * @param mapping  the mapping	 * @param form     the form	 * @param request  the request	 * @param response the response	 */	@RequestMapping(value = { "/delete" }, method = { RequestMethod.GET, RequestMethod.POST })	public void delete(HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_DELETE)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String NOTICEID = ParamUtil.get(request, "NOTICE_ID");			noticeService.txDelete(NOTICEID, userBean);		} catch (Exception e) {			jsonResult = jsonResult(false, "删除失败");		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}	/**	 * * 信息编辑初始化 * @param mapping * @param form * @param request * @param response	 * * @return.	 * 	 * @param mapping  the mapping	 * @param form     the form	 * @param request  the request	 * @param response the response	 * 	 * @return the action forward	 *///	@RequestMapping(value = { "/toEdit"}, method = { RequestMethod.GET, RequestMethod.POST })	@GetMapping("/toEdit")	public String toEdit(HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		Map<String, String> params = new HashMap<>();		params.put("USERID", userBean.getXTYHID());		try {			// 获取账套信息			List<Map<String, String>> zts = noticeService.queryFGZTXXByUser(params);			if (zts == null || zts.size() <= 0) {				throw new ServiceException("对不起，您没有权限 !");			}			request.setAttribute("zts", zts);			String NOTICEID = ParamUtil.get(request, "NOTICEID");			if (StringUtils.isNotEmpty(NOTICEID)) {				Map<String, Object> entry = noticeService.load(NOTICEID);				// 查询分管帐套				List<Map<String, String>> deptModelList = noticeService.childDeptQuery(NOTICEID);				if (deptModelList != null && deptModelList.size() > 0) {					String NOTICE_DEPTS = "";					for (Map<String, String> dept : deptModelList) {						NOTICE_DEPTS += dept.get("DEPT_ID") + ",";					}					if (NOTICE_DEPTS.length() > 0)						NOTICE_DEPTS = NOTICE_DEPTS.substring(0, NOTICE_DEPTS.length() - 1);					entry.put("NOTICE_DEPTS", NOTICE_DEPTS);				}				request.setAttribute("rst", entry);			}		} catch (Exception e) {			e.printStackTrace();			request.setAttribute("msg", e.getMessage());		}		return view(webPath, "Notice_Edit");	}	/**	 * * 信息编辑 新增/修改 * @param mapping * @param form * @param request * @param	 * response * @return.	 *	 * @param request  the request	 * @param response the response	 */	@RequestMapping(value = { "/edit" }, method = { RequestMethod.GET, RequestMethod.POST })	public void edit(HttpServletRequest request, HttpServletResponse response) {		UserBean userBean = ParamUtil.getUserBean(request);		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {			throw new ServiceException("对不起，您没有权限 !");		}		PrintWriter writer = getWriter(response);		String jsonResult = jsonResult();		try {			String jsonData = ParamUtil.get(request, "jsonData");			NoticeModel noticeModel = null;			if (StringUtils.isNotEmpty(jsonData)) {				noticeModel = new Gson().fromJson(jsonData, new TypeToken<NoticeModel>() {				}.getType());			}			/*			 * String NOTICE = ParamUtil.get(request, "NOTICE");			 * noticeModel.setNOTICE(NOTICE);			 */			String NOTICEID = ParamUtil.get(request, "NOTICE_ID");			NOTICEID = noticeService.txEdit(NOTICEID, noticeModel, userBean);		} catch (Exception e) {			e.printStackTrace();			jsonResult = jsonResult(false, "保存失败");		}		if (null != writer) {			writer.write(jsonResult);			writer.close();		}	}	/**	 * 公告 更多信息的 列表	 * 	 * @param mapping	 * @param form	 * @param request	 * @param response	 * @return	 */	@RequestMapping(value = { "/listNotice" }, method = { RequestMethod.GET, RequestMethod.POST })	public String listNotice(HttpServletRequest request, HttpServletResponse response,PageDesc pageDesc) {			UserBean userBean = (UserBean) request.getSession(false).getAttribute(				"UserBean");			Map<String, Object> params = LogicUtil.getParameterMap(request);			params.put("DELFLAG",BusinessConsts.DEL_FLAG_COMMON);			String IS_DRP_LEDGER = userBean.getIS_DRP_LEDGER();//1.经销商   0.总部			if(BusinessConsts.INTEGER_1.equals(IS_DRP_LEDGER)){				params.put("NOTICE_OBJ", "3");			}else{				params.put("NOTICE_OBJ", "2");			}			params.put("USERID",userBean.getXTYHID());			//字段排序			//drpFirpageService.pageQueryNotice(params,pageDesc);			request.setAttribute("params", params);			noticeService.pageQuery(params, pageDesc);			request.setAttribute("page",pageDesc);		return view(webPath, "Notice_List2");	}		@RequestMapping(value = { "/queryNoticeById" }, method = { RequestMethod.GET, RequestMethod.POST })	public String queryNoticeById(HttpServletRequest request, HttpServletResponse response) {		String NOTICEID = ParamUtil.get(request, "NOTICE_ID");		if (StringUtils.isNotEmpty(NOTICEID)) {			Map<String, Object> entry = noticeService.load(NOTICEID);			request.setAttribute("notice", entry);		}		return view(webPath, "notices");	}//	/**//	 * * 明细列表//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 * //	 * @return the action forward//	 *///	@RequestMapping(value = { "/childList"}, method = { RequestMethod.GET, RequestMethod.POST })//	public String childList(	HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		String noticeId = ParamUtil.get(request, "NOTICEID");//		if (!StringUtil.isEmpty(noticeId)) {//			List<NotcAreaModel> result = noticeService.childQuery(noticeId);//			request.setAttribute("rst", result);//		}//		request.setAttribute("pvg", setPvg(userBean));//		return view(webPath,"Notice_Mx_List");//	}//	//	//	//	//	/**//	 * * to 直接编辑明细页面//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 * //	 * @return the action forward//	 *///	@RequestMapping(value = { "/toChildEdit"}, method = { RequestMethod.GET, RequestMethod.POST })//	public String toChildEdit(HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		// 多个Id批量查询，用逗号隔开//		String MXIDS = request.getParameter("MXIDS");//		// 没有零星领料Id可以直接跳转。//		if (!StringUtil.isEmpty(MXIDS)) {//			Map<String, String> params = new HashMap<String, String>();//			params.put("MXIDS", MXIDS);//			List<NotcAreaModel> list = noticeService.loadChilds(params);//			request.setAttribute("rst", list);//		}//		request.setAttribute("pvg", setPvg(userBean));//		return view(webPath,"Notice_Mx_Edit");//	}////	//	/**//	 * * 子表 新增/修改数据//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 *///	@RequestMapping(value = { "/childEdit"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void childEdit(HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String noticeId = request.getParameter("NOTICEID");//			String jsonDate = request.getParameter("childJsonData");//			String MXIDS = request.getParameter("MXIDS");//			 //			if (!StringUtil.isEmpty(jsonDate)) {//				List<NotcAreaModel> modelList = new Gson().fromJson(//						jsonDate, new TypeToken<List<NotcAreaModel>>() {//						}.getType());//				//				// 子表判断重复与否//				String returnMessage = this.vailChild(noticeId, MXIDS,modelList);//				if (!StringUtil.isEmpty(returnMessage)) {//					jsonResult = jsonResult(false, returnMessage);//				}else{//					noticeService.txChildEdit(noticeId, modelList);//				}//				 //			}//		} catch (Exception e) {//			jsonResult = jsonResult(false, "保存失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}////	/**//	 * 明细重复判断//	 * //	 * @return//	 *///	private String vailChild(String pId, String chilIds,//			List<NotcAreaModel> modelList) {////		String returnMessage = null;////		if ("''".equals(chilIds) || chilIds == "''") {//			chilIds = "";//		}////		int size = modelList.size();//		StringBuffer prdNOS = new StringBuffer();////		// 如果页面的之无重复，在和同一区域下的数据库的值判断//		if (size > 0) {//			for (int i = 0; i < size; i++) {//				prdNOS.append("'" + modelList.get(i).getAREA_NO() + "'");//				if ((i + 1) != size) {//					prdNOS.append(",");//				}//			}////			Map<String, String> paramsMx = new HashMap<String, String>();//			paramsMx.put("NOTICE_ID", pId);//			paramsMx.put("AREANOS", prdNOS.toString());//			paramsMx.put("CHILDIDS", chilIds);//			List list = noticeService.findList(paramsMx);//			if (null != list && list.size() > 0) {//				returnMessage = "区域编号与已有的记录重复";//			}//		}////		return returnMessage;//	}//	//	/**//	 * * 明细批量删除//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 *///	@RequestMapping(value = { "/childDelete"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void childDelete(HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_DELETE)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String NOTICEID = request.getParameter("NOTICEID");//			String detIDs = request.getParameter("MXIDS");//			// 批量删除，多个Id之间用逗号隔开//			noticeService.txBatch4DeleteChild(NOTICEID,detIDs);//		} catch (Exception e) {//			jsonResult = jsonResult(false, "删除失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}////	/**//	 * //	 * 提交前校验 公告生效区域//	 *///	@RequestMapping(value = { "/commit"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void commit(//			HttpServletRequest request, HttpServletResponse response) {//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String NOTICEID = request.getParameter("NOTICEID");//			// 批量删除，多个Id之间用逗号隔开//			int count = noticeService.childQueryForInt(NOTICEID);//			int deptCount = noticeService.childDeptQueryForInt(NOTICEID);//			if(count>0 || deptCount>0){//				jsonResult = jsonResult(true, "");//			}else{//				jsonResult = jsonResult(false, "请填写公告生效区域或者公告生效部门");//			}//		} catch (Exception e) {//			jsonResult = jsonResult(false, "提交失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}//	//	//	/**//	 * //	 * 关闭//	 *///	@RequestMapping(value = { "/toClose"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void toClose(//			HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_CLOSE)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String NOTICEID = request.getParameter("NOTICEID");//			noticeService.txClose(NOTICEID,userBean);//			jsonResult = jsonResult(true, "关闭成功");//		} catch (Exception e) {//			jsonResult = jsonResult(false, "关闭失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}//	//	//	//	//	//	/**//	 * * 明细列表//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 * //	 * @return the action forward//	 *///	@RequestMapping(value = { "/childDeptList"}, method = { RequestMethod.GET, RequestMethod.POST })//	public String childDeptList(//			HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_BWS)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		String noticeId = ParamUtil.get(request, "NOTICEID");//		if (!StringUtil.isEmpty(noticeId)) {//			List<NotcDeptModel> result = noticeService.childDeptQuery(noticeId);//			request.setAttribute("rst", result);//		}//		request.setAttribute("pvg", setPvg(userBean));//		return view(webPath,"Notice_Dept_List");//	}//	//	//	//	//	/**//	 * * to 直接编辑明细页面//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 * //	 * @return the action forward//	 *///	@RequestMapping(value = { "/toChildDeptEdit"}, method = { RequestMethod.GET, RequestMethod.POST })//	public String toChildDeptEdit(//			HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		// 多个Id批量查询，用逗号隔开//		String MXIDS = request.getParameter("MXIDS");//		// 没有零星领料Id可以直接跳转。//		if (!StringUtil.isEmpty(MXIDS)) {//			Map<String, String> params = new HashMap<String, String>();//			params.put("MXIDS", MXIDS);//			List<NotcDeptModel> list = noticeService.loadDeptChilds(params);//			request.setAttribute("rst", list);//		}//		request.setAttribute("pvg", setPvg(userBean));//		return view(webPath,"Notice_Dept_Edit");//	}////	//	/**//	 * * 子表 新增/修改数据//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 *///	@RequestMapping(value = { "/childDeptEdit"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void childDeptEdit(//			HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_EDIT)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String noticeId = request.getParameter("NOTICEID");//			String jsonDate = request.getParameter("childJsonData");//			String MXIDS = request.getParameter("MXIDS");//			 //			if (!StringUtil.isEmpty(jsonDate)) {//				List<NotcDeptModel> modelList = new Gson().fromJson(//						jsonDate, new TypeToken<List<NotcDeptModel>>() {//						}.getType());//				//				// 子表判断重复与否//				String returnMessage = this.vailDeptChild(noticeId, MXIDS,modelList);//				if (!StringUtil.isEmpty(returnMessage)) {//					jsonResult = jsonResult(false, returnMessage);//				}else{//					noticeService.txChildDeptEdit(noticeId, modelList);//					jsonResult = jsonResult(true, "保存成功"); //				}//				//			}//		} catch (Exception e) {//			jsonResult = jsonResult(false, "保存失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}////	//	//	/**//	 * 明细重复判断//	 * //	 * @return//	 *///	private String vailDeptChild(String pId, String chilIds,//			List<NotcDeptModel> modelList) {////		String returnMessage = null;////		if ("''".equals(chilIds) || chilIds == "''") {//			chilIds = "";//		}////		int size = modelList.size();//		StringBuffer DEPT_IDS = new StringBuffer();////		// 如果页面的之无重复，在和同一区域下的数据库的值判断//		if (size > 0) {//			for (int i = 0; i < size; i++) {//				DEPT_IDS.append("'" + modelList.get(i).getDEPT_ID() + "'");//				if ((i + 1) != size) {//					DEPT_IDS.append(",");//				}//			}////			Map<String, String> paramsMx = new HashMap<String, String>();//			paramsMx.put("NOTICE_ID", pId);//			paramsMx.put("DEPT_IDS", DEPT_IDS.toString());//			paramsMx.put("CHILDIDS", chilIds);//			List list = noticeService.findDeptList(paramsMx);//			if (null != list && list.size() > 0) {//				returnMessage = "部门与已有的记录重复";//			}//		}////		return returnMessage;//	}//	//	//	/**//	 * * 明细批量删除//	 * //	 * @param mapping//	 *            the mapping//	 * @param form//	 *            the form//	 * @param request//	 *            the request//	 * @param response//	 *            the response//	 *///	@RequestMapping(value = { "/childDeptDelete"}, method = { RequestMethod.GET, RequestMethod.POST })//	public void childDeptDelete(//			HttpServletRequest request, HttpServletResponse response) {//		UserBean userBean = ParamUtil.getUserBean(request);//		if (Consts.FUN_CHEK_PVG && !QXUtil.checkMKQX(userBean, PVG_DELETE)) {//			throw new ServiceException("对不起，您没有权限 !");//		}//		PrintWriter writer = getWriter(response);//		String jsonResult = jsonResult();//		try {//			String NOTICEID = request.getParameter("NOTICEID");//			String detIDs = request.getParameter("MXIDS");//			// 批量删除，多个Id之间用逗号隔开//			noticeService.txBatch4DeleteDeptChild(NOTICEID,detIDs);//		} catch (Exception e) {//			jsonResult = jsonResult(false, "删除失败");//			e.printStackTrace();//		}//		if (null != writer) {//			writer.write(jsonResult);//			writer.close();//		}//	}	/**	 * * 设置权限Map	 * 	 * @return Map<String,String>	 */	private Map<String, String> setPvg(UserBean userBean) {		Map<String, String> pvgMap = new HashMap<String, String>();		pvgMap.put("PVG_BWS", QXUtil.checkPvg(userBean, PVG_BWS));		pvgMap.put("PVG_EDIT", QXUtil.checkPvg(userBean, PVG_EDIT));		pvgMap.put("PVG_DELETE", QXUtil.checkPvg(userBean, PVG_DELETE));		pvgMap.put("PVG_START_STOP", QXUtil.checkPvg(userBean, PVG_START_STOP));		pvgMap.put("PVG_COMMIT_CANCLE", QXUtil.checkPvg(userBean, PVG_COMMIT_CANCLE));		pvgMap.put("PVG_TRACE", QXUtil.checkPvg(userBean, PVG_TRACE));		pvgMap.put("PVG_BWS_AUDIT", QXUtil.checkPvg(userBean, PVG_BWS_AUDIT));		pvgMap.put("PVG_AUDIT_AUDIT", QXUtil.checkPvg(userBean, PVG_AUDIT_AUDIT));		pvgMap.put("PVG_FINISH_CANCLE", QXUtil.checkPvg(userBean, PVG_FINISH_CANCLE));		pvgMap.put("PVG_TRACE_AUDIT", QXUtil.checkPvg(userBean, PVG_TRACE_AUDIT));		pvgMap.put("PVG_CLOSE", QXUtil.checkPvg(userBean, PVG_CLOSE));		pvgMap.put("AUD_TAB_NAME", AUD_TAB_NAME);		pvgMap.put("AUD_TAB_KEY", AUD_TAB_KEY);		pvgMap.put("AUD_BUSS_STATE", AUD_BUSS_STATE);		pvgMap.put("AUD_BUSS_TYPE", AUD_BUSS_TYPE);		pvgMap.put("AUD_FLOW_INS", AUD_FLOW_INS);		return pvgMap;	}}